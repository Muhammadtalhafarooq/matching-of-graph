# -*- coding: utf-8 -*-
"""Independent Sets

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FrsrimaJQZRpbIaimE2Ho00e1SFJRBPQ

Independent Sets of B1
"""

from itertools import combinations


def independent_sets(graph):
    def is_independent(subset):
        for i in range(len(subset)):
            for j in range(i+1, len(subset)):
                if subset[i] in graph[subset[j]]:
                    return False
        return True


    vertices = list(graph.keys())
    n = len(vertices)
    for i in range(2**n):
        subset = [vertices[j] for j in range(n) if (i & (1 << j)) != 0]
        if is_independent(subset):
            yield subset


# Example usage
graph = {1: [1,2],2: [2,1,3],3: [3,2,4,8],4: [3,4,5],5: [4,5,6],6: [7,6,5],7: [7,8,6],8: [3,8,7]}
counter = 0
for independent_set in independent_sets(graph):
    counter += 1
    # print(independent_set)
print(counter)




counter = 0
for independent_set in independent_sets(graph):
    counter += 1
    # print(independent_set)
print(counter)

"""Independent Sets of B2"""

from itertools import combinations


def independent_sets(graph):
    def is_independent(subset):
        for i in range(len(subset)):
            for j in range(i+1, len(subset)):
                if subset[i] in graph[subset[j]]:
                    return False
        return True


    vertices = list(graph.keys())
    n = len(vertices)
    for i in range(2**n):
        subset = [vertices[j] for j in range(n) if (i & (1 << j)) != 0]
        if is_independent(subset):
            yield subset


# Example usage
graph = {1: [1,2],2: [2,1,3],3: [3,2,4,8],4: [3,4,5],5: [4,5],7: [7,8],8: [3,8,7]}
counter = 0
for independent_set in independent_sets(graph):
    counter += 1
    # print(independent_set)
print(counter)




counter = 0
for independent_set in independent_sets(graph):
    counter += 1
    # print(independent_set)
print(counter)

"""Independent Set of A3"""

from itertools import combinations


def independent_sets(graph):
    def is_independent(subset):
        for i in range(len(subset)):
            for j in range(i+1, len(subset)):
                if subset[i] in graph[subset[j]]:
                    return False
        return True


    vertices = list(graph.keys())
    n = len(vertices)
    for i in range(2**n):
        subset = [vertices[j] for j in range(n) if (i & (1 << j)) != 0]
        if is_independent(subset):
            yield subset


# Example usage
graph = {1: [1,2,10],2: [2,1,3,9],3: [3,2,4,8],4: [3,4,5],5: [4,5,6],6: [7,6,5],7: [7,8,6],8: [3,8,7],9: [9,2],10: [10,1]}
counter = 0
for independent_set in independent_sets(graph):
    counter += 1
    # print(independent_set)
print(counter)




counter = 0
for independent_set in independent_sets(graph):
    counter += 1
    # print(independent_set)
print(counter)

"""Independent Set of A2"""

from itertools import combinations


def independent_sets(graph):
    def is_independent(subset):
        for i in range(len(subset)):
            for j in range(i+1, len(subset)):
                if subset[i] in graph[subset[j]]:
                    return False
        return True


    vertices = list(graph.keys())
    n = len(vertices)
    for i in range(2**n):
        subset = [vertices[j] for j in range(n) if (i & (1 << j)) != 0]
        if is_independent(subset):
            yield subset


# Example usage
graph = {1: [1,2,10],2: [2,1,3,9],3: [3,2,4,8],4: [3,4,5],5: [4,5],7: [7,8],8: [3,8,7],9: [9,2],10: [10,1]}
counter = 0
for independent_set in independent_sets(graph):
    counter += 1
    # print(independent_set)
print(counter)




counter = 0
for independent_set in independent_sets(graph):
    counter += 1
    # print(independent_set)
print(counter)